--- 
title: The problem with patterns 
description: This post discusses potential issues introduced by the use of design patterns from small interaction design patterns, to larger full service patterns.
date: "2018-08-14"
tags: [Design] 
---

<p>Originally posted on
  <a href="https://alistapart.com/article/problem-with-patterns" class="anchor">A List Apart</a>
</p>

<p>It started off as an honest problem with a brilliant solution. As the ways we use the web continue to grow and evolve, we, as its well-intentioned makers and stewards, needed something better than making simple collections of pages over and over
  again.</p>

<p>Design patterns, component libraries, or even style guides have become the norm for organizations big and small. Having reusable chunks of UI aids consistency and usability for users, and it lends familiarity and efficiency to designers. This in
  turn frees up designers time to focus on bigger problems, like solving for their users needs. In theory.</p>

<p>The use of design patterns, regardless of their scope or complexity, should never stifle creativity or hold back design progress. In order to achieve what they promise, they should be adaptable, flexible, and scalable. A good design pattern is
  undeterred by context, and most importantly, is unobtrusive. Again, in theory.</p>

<p>Before getting further into the weeds, let’s define what is meant by the term
  <i>pattern</i>
  here. You’re probably wondering what the difference is between all the different combinations of the same handful of words being used in the web community.</p>

<p>Initially,
  <i>design patterns</i>
  were small pieces of a user interface, like buttons and error messages.</p>

<div class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig1.png" class="lazyload" alt="Two styled buttons: one dark blue, one green">
</div>

<p>Design patterns go beyond the scope and function of a style guide, which deals more with documenting how something should look, feel, or work. Type scales, design principles, and writing style are usually found within the bounds of a style guide.</p>

<p>More recently, the scope of design patterns has expanded as businesses and organizations look to work more efficiently and consistently, especially if it involves a group or family of products and services. Collections of design patterns are then
  commonly used to create reusable components of a larger scope, such as account sign-up, purchase checkout, or search. This is most often known as the component library.</p>

<div class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig2.png" class="lazyload" alt="A simple wireframe with tabbed content">
</div>

<p>The final evolution of all these is known as a
  <i>design system</i>
  (or a
  <i>design language</i>). This encompasses the comprehensive set of design standards, documentation, and principles. It includes the design patterns and components to achieve those standards and adhere to those principles. More often than not, a
  design system is still used day-to-day by designers for its design patterns or components</p>

<h2>The service design pattern</h2>

<p>A significant reason why designing for the web has irrevocably changed like this is due to the fact that more and more products and services live on it. This is why service design is becoming much more widely valued and sought after in the industry.</p>

<p>
  <i>Service patterns</i>—unlike all of the above patterns, which focus on relatively small and compartmentalized parts of a UI—go above and beyond. They aim to incorporate an entire task or chunk of a users journey. For example, a credit card
  application can be represented by some design patterns or components, but the
  <i>process of submitting an application</i>
  to obtain a credit card is a service pattern.</p>

<div class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig3.png" class="lazyload" alt="A simple page layout from Gov.uk">
</div>

<p>If thinking in terms of an analogy like
  <i>atomic design</i>, service patterns dont fit any one category (atoms, molecules, organisms, etc). For example, a design pattern for a form can be described as a
  <i>molecule</i>. It does one thing and does it well. This is the beauty of a good design pattern—it can be taken without context and used effectively across a variety of situations.</p>

<p>
  <i>Service design patterns</i>
  attempt to combine the goals of both design patterns and components by creating a reusable task. In theory.</p>

<h2>So, whats the problem?</h2>

<h3>The design process is undervalued</h3>

<p>Most obvious misuses of patterns are easy to avoid with good documentation, but do patterns actually result in better-designed products and services?</p>

<p>Having a library of design components can sometimes give the impression that all the design work has been completed. Designers or developers can revert to using a library as clip art to create “off-the-shelf” solutions. Projects move quickly into
  development.</p>

<p>Although patterns do help teams hesitate less and build things in shorter amounts of time, it is how and why a group of patterns and components are stitched together that results in great design.</p>

<p>For example, when designing digital forms, using button and input fields patterns will improve familiarity and consistency, without a doubt. However, there is no magic formula for the order in which questions on a form should be presented or for
  how to word them. To best solve for a users needs, an understanding of their goals and constraints is essential.</p>

<p>Patterns can even cause harm without considering a users context and the bearing it may have on their decision-making process.</p>

<p>For example, if a user will likely be filling out a form under stress (this can be anything from using a weak connection, to holding a mobile phone with one hand, to being in a busy airport), an interface should prioritize minimizing cognitive
  load over the number of steps or clicks needed to complete it. This decision architecture cannot be predetermined using patterns.</p>

<div role="group" class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig4.png" class="lazyload" alt="A simple wireframe showing a multi-step form">
</div>

<h3>Patterns don't start with user needs</h3>

<p>Components and service patterns have a tendency to serve the needs of the business or organization, not the user.</p>

<figure role="group" class="table-wrapper">
  <table>
    <caption>Service patterns vs user needs</caption>
    <thead>
      <tr>
        <th scope="col">Pattern</th>
        <th scope="col">Service</th>
        <th scope="col">User need</th>
        <th scope="col">Organization need</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Apply for something</td>
        <td>Get a fishing license</td>
        <td>Enjoy the outdoors</td>
        <td>Keep rivers clean; generate income</td>
      </tr>
      <tr>
        <td>Apply for something</td>
        <td>Apply for a work visa</td>
        <td>Work in a different country</td>
        <td>Check eligibility</td>
      </tr>
      <tr>
        <td>Create an account</td>
        <td>Online bank account</td>
        <td>Save money</td>
        <td>Security; fraud prevention</td>
      </tr>
      <tr>
        <td>Create an account</td>
        <td>Join a gym</td>
        <td>Lose weight</td>
        <td>Capture customer information</td>
      </tr>
      <tr>
        <td>Register</td>
        <td>Register to vote</td>
        <td>Make my voice heard</td>
        <td>Check eligibility</td>
      </tr>
      <tr>
        <td>Register</td>
        <td>Online shopping</td>
        <td>Find my order</td>
        <td>Security; marketing</td>
      </tr>
    </tbody>
  </table>
</figure>

<p>If you are simply designing a way to apply for a work visa, having form field and button patterns is very useful. But any meaningful testing sessions with users will speak to how confident they felt in obtaining the necessary documents to work
  &nbsp; abroad, not if they could simply locate a “submit” button.</p>

<h3>User needs are conflated with one another</h3>

<p>Patterns are also sometimes a result of grouping together user needs, essentially creating a set of fictional users that in reality do not exist. Users usually have one goal that they want to achieve efficiently and effectively. Assembling a group
  of user needs can result in a complex system trying to be everything to everyone.</p>

<p>For example, when creating a design pattern for registering users to a service across a large organization, the challenge can very quickly move from:</p>

<p>“How can I check the progress of my application?”<br/>
  “Can I update or change my delivery address?”<br/>
  “Can I quickly repeat or renew an application?”</p>

<p>to:</p>

<p>“How can
  <em>we</em>
  get all the details we need from users to allow them to register for an account?”</p>

<p>The individual user needs are forgotten and replaced with a combined assumed need to “register for an account” in order to “view a dashboard.” In this case, the original problem has even been adapted to suit the design pattern instead of the other
  way around.</p>

<h3>Outcomes are valued over context</h3>

<p>Even if they claim to address user context, the success of a service pattern might still be measured through an end result, output, or outcome. Situations, reactions, and emotions are still overlooked.</p>

<p>Take mass transit, for example. When the desired outcome is to get from Point A to Point B, we may find that a large number of users need to get there
  <em>quickly</em>, especially if theyre headed home from work. But we cannot infer from this need that the most important goal of transportation is speed. Someone traveling alone at night or in unfamiliar surroundings may place greater importance on
  safety or need more guidance and reassurance from the service.</p>

<p>Sometimes, service patterns cannot solve complex human problems like these. More often than not, an over-reliance on outcome-focused service patterns just defeats the purpose of building any empathy during the design process.</p>

<p>For example, date pickers tend to follow a similar pattern across multiple sectors, including transport, leisure, and healthcare. Widely-used patterns like this are intuitive and familiar to most users.</p>

<div class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig5.png" class="lazyload" alt="Three screenshots of similar-looking date finder tools">
</div>

<p>This does not mean that the same date picker pattern can be used seamlessly in any service. If a user is trying to book an emergency doctor appointment, the same patterns seen above are suddenly much less effective. Being presented with a full
  calendar of options is no longer helpful because choice is no longer the most valuable aspect of the service. The user needs to quickly see the first available appointment with minimal choices or distractions.</p>

<div class="image-ratio image-ratio--thin">
  <img src="#" data-src="/images/posts/patterns/fig6.png" class="lazyload" alt="Two screenshots: a traditional date picker and a simplified interface">
</div>

<h3>Digital by default</h3>

<p>Because patterns are built for reuse, they sometimes encourage us to use them without much question, particularly assuming that digital technology is the solution.</p>

<p>A
  <i>service</i>
  encompasses everything a user needs to complete their goal. By understanding the users entire journey, we start to uncover their motivations and can begin to think about new, potentially non-digital ways to solve their problems.</p>

<p>For example, the Canadian Immigration Service receives more than 5.2 million inquiries a year by email or phone from people looking for information about applications.</p>

<p>One of the most common reasons behind the complaints was the time it took to complete an application over the phone. Instead of just taking this data and speeding up the process with a digital form, the product team focused on understanding the
  service’s users and their reasons behind their reactions and behaviors.</p>

<p>For example, calls received were often bad-tempered, despite callers being greeted by a recorded message informing them of the length of time it could take to process an application, and advising them against verbally abusing the staff.</p>

<p>The team found that users were actually more concerned with the lack of information than they were with the length of time it took to process their application. They felt confused, lost, and clueless about the immigration process. They were
  worried they had missed an email or letter in the mail asking for missing documentation.</p>

<p>In response to this, the team decided to change the call centers greeting, setting the tone to a more positive and supportive one. Call staff also received additional training and began responding to questions even if the application had not
  reached its standard processing time.</p>

<p>The team made sure to not define the effectiveness of the design by how short new calls were. Although the handling time for each call went up by 16 percent, follow-up calls dropped by a whopping 30 percent in fewer than eight weeks, freeing up
  immigration agents time to provide better quality information to callers.</p>

<h2>Alternatives to patterns</h2>

<p>As the needs of every user are unique, every service is also unique. To design a successful service you need to have an in-depth understanding of its users, their motivations, their goals, and their situations. While there are numerous
  methodologies to achieve this, a few key ones follow:</p>

<h3>Framing the problem</h3>

<p>Use research or discovery phases to unearth the real issues with the existing service or process. Contextual research sessions can help create a deeper understanding of users, which helps to ensure that the root cause of a problem is being
  addressed, not just the symptoms.</p>

<h3>Journey maps</h3>

<p>Journey maps are used to create a visual representation of a service through the eyes of the user. Each step a user takes is recorded against a timeline along with a series of details including:</p>

<ul class="unordered-list">
  <li class="unordered-list__list-item">how the user interacts with the service;</li>
  <li class="unordered-list__list-item">how the service interacts with the user;</li>
  <li class="unordered-list__list-item">the medium of communication;</li>
  <li class="unordered-list__list-item">the users emotions;</li>
  <li class="unordered-list__list-item">and service pain points.</li>
</ul>

<h3>Service teams, not product teams</h3>

<p>Setting up specialist pattern or product teams creates a disconnect with users. There may be common parts to user journeys, such as sign-up or on-boarding, but having specialist design teams will ultimately not help an organization meet user (and
  therefore business) needs. Teams should consider taking an end-to-end, service approach.</p>

<figure role="group" class="table-wrapper">
  <table>
    <caption>Assign design teams to a full service rather than discrete parts of it</caption>
    <thead>
      <tr>
        <th scope="col">Yes</th>
        <th scope="col">No</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Mortgage service</td>
        <td>Registration; Application</td>
      </tr>
      <tr>
        <td>Passports service</td>
        <td>Registration; Application</td>
      </tr>
      <tr>
        <td>Tax-return service</td>
        <td>Registration; Submit Information</td>
      </tr>
    </tbody>
  </table>
</figure>

<h3>Be open and inclusive</h3>

<p>Anyone on a wider team should be able to contribute to or suggest improvements to a design system or component library. If applicable, people should also be able to prune away patterns that are unnecessary or ineffective. This enables patterns to
  grow and develop in the most fruitful way.</p>

<p>Open-sourcing pattern libraries, like the ones managed by
  <a href="https://a11yproject.com" class="anchor">a11yproject.com</a>
  or
  <a href="https://WordPress.org" class="anchor">WordPress.org</a>, is a good way to keep structure and process in place while still allowing people to contribute. The transparent and direct review process characteristic of the open-source spirit can also help reduce friction.</p>

<p>Across larger organizations, this can be harder to manage, and the time commitment can contradict the intended benefits. Still, some libraries, such as the
  <a href="http://www.carbondesignsystem.com/" class="anchor">Carbon Design System</a>, exist and are open to suggestions and feedback.</p>

<h2>In summary</h2>

<p>A design pattern library can range from being thorough, trying to cover all the bases, to politely broad, so as to not step on the toes of a design team. But patterns should never sacrifice user context for efficiency and consistency. They should
  reinforce the importance of the design process while helping an organization think more broadly about its users needs and its own goals. Real-world problems rarely are solved with out-of-the-box solutions. Even in service design.</p>

<p>When working with any level of design system, we should remind ourselves of our abilities to think, and not miss the forest for the trees.</p>
