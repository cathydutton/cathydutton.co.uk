--- 
title: 8 Tips to Help You Get the Best out of Sass 
description: A series of hints and tips to help you get the best out of Sass, Sass creates Syntactically Awesome Style sheets, or at least thats what it is supposed to do. When used effectively, Sass helps to build scalable and DRY CSS. When used incorrectly however, Sass can actually increase file size and add unnecessary or duplicate code. 
date: 2015-02-08 
tags: [CSS] 
---

<p>Article originally posted on
  <a href="http://www.sitepoint.com/8-tips-help-get-best-sass/">Sitepoint</a>.</p>

<p>Sass creates Syntactically Awesome Style sheets, or at least thats what it is supposed to do. When used effectively, Sass helps to build scalable and
  <abbr title="Don't Repeat Yourself">DRY</abbr>
  CSS. When used incorrectly however, Sass can actually increase file size and add unnecessary or duplicate code. Below is a series of hints and tips to help you get the best out of Sass&hellip;</p>

<h2 id="1-structure-your-sass">1. Structure Your Sass</h2>
<div class="widget maestro maestro-content-type-html " id="maestro-727">
  <div class="proper-ad-unit">
    <div id="proper-ad-sitepoint_content_1">
      <script>
        propertag.cmd.push(function () {
          proper_display('sitepoint_content_1');
        });
      </script>
    </div>
  </div>
</div>
<p>Getting your site structure correct from the beginning is vital for any new Sass project. Using
  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#partials">partials</a>
  allows you to break the CSS up into smaller more manageable blocks of code that are easier to maintain and develop.</p>
<p>Partial files are created using an underscore and are not output as separate CSS files. Each partial should be imported using a master Sass file (global.scss) in the root of the Sass folder.</p>
<p>For example, here&rsquo;s a sample folder structure to demonstrate this:</p>
<pre><code class="language-sass">vendor/
base/
|
|-- _variables.scss
|-- _mixins.scss
|-- _placeholders.scss

framework/
modules/
global.scss</code></pre>
<p>This folder structure ensures the site is easy to work with, and add to. For example, new modules can easily be added to the module folder and then added to global.scss using @import.</p>
<p>To demonstrate, here&rsquo;s a sample global.scss file:</p>
<pre><code class="language-sass">/* vendor - default fall-backs and external files.
========================================================================== */

@import 'vendor/_normalize.scss';


/* base - base variable file along with starting point mixins and placeholders.
========================================================================== */

@import 'base/_variables.scss';
@import 'base/_mixins.scss';
@import 'base/_placeholders.scss';


/* framework - structure and layout files.
========================================================================== */

@import 'framework/_grid.scss';
@import 'framework/_breakpoints.scss';
@import 'framework/_layout.scss';


/* modules - re-usable site elements.
========================================================================== */

@import 'modules/_buttons.scss';
@import 'modules/_lists.scss';
@import 'modules/_tabs.scss';</code></pre>
<p>And as a side point, you might want to check out
  <a href="http://www.sitepoint.com/architecture-sass-project/">Hugo&rsquo;s extensive post on Sass architecture</a>
  for more tips in this area.</p>
<h2 id="2-use-sass-variables-more-effectively">2. Use Sass Variables More Effectively</h2>
<p>Variables are one of the more straightforward features of Sass but are still on occasion used incorrectly. Creating a site-wide naming convention is essential when working with Variables. Without one, they become harder to understand and re-use.</p>
<p>Here are some tips for creating useful variables:</p>
<ul class="unordered-list">
  <li class="unordered-list__list-item">Don&rsquo;t be to vague when naming your Variables.</li>
  <li class="unordered-list__list-item">Have and stick to a naming convention (Modular, BEM, etc.)</li>
  <li class="unordered-list__list-item">Ensure the variable use is justified.</li>
</ul>

<p>Here are some good examples:</p>
<pre><code class="language-sass">$orange: #ffa600;
$grey: #f3f3f3;
$blue: #82d2e5;

$link-primary: $orange;
$link-secondary: $blue;
$link-tertiary: $grey;

$radius-button: 5px;
$radius-tab: 5px;</code></pre>
<p>And some bad examples:</p>
<pre><code class="language-sass">$link: #ffa600;
$liststyle: none;
$radius: 5px;</code></pre>
<h2 id="3-reduce-mixin-usage">3. Reduce Mixin Usage</h2>
<p>A
  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins">mixin</a>
  is a great way to include sections of code multiple times within a site. However, including a mixin is the same as copying and pasting the styles throughout the CSS file. It creates a mass of duplicate code and can bloat your CSS file.</p>
<p>A mixin therefore should only be used if an argument is present, to quickly create modified styles.</p>
<p>Here&rsquo;s an example:</p>
<pre><code class="language-sass">@mixin rounded-corner($arc) {
    -moz-border-radius: $arc;
    -webkit-border-radius: $arc;
    border-radius: $arc;
}</code></pre>
<p>This rounded-corner mixin can be used in any situation simply by changing the value of $arc, making it a worthwhile mixin:</p>
<pre><code class="language-sass">.tab-button {
     @include rounded-corner(5px);
}

.cta-button {
     @include rounded-corner(8px);
}</code></pre>
<p>A bad example might look like this:</p>
<pre><code class="language-sass">@mixin cta-button {
    padding: 10px;
    color: #fff;
    background-color: red;
    font-size: 14px;
    width: 150px;
    margin: 5px 0;
    text-align: center;
    display: block;
}</code></pre>
<p>This mixin has no argument and would therefore be
  <a href="http://www.sitepoint.com/sass-mixin-placeholder/">better written as a placeholder</a>, which brings us to point 4.</p>
<h2 id="4-embrace-placeholders">4. Embrace Placeholders</h2>
<p>Unlike mixins,
  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_">placeholders</a>
  can be used multiple times without adding any duplicate code. This makes them a much friendlier option for outputting DRY CSS:</p>
<pre><code class="language-sass">%bg-image {
    width: 100%;
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
}

.image-one {
    @extend %bg-image;
    background-image:url(/img/image-one.jpg");
}

.image-two {
    @extend %bg-image;
    background-image:url(/img/image-two.jpg");
}</code></pre>
<p>And the compiled CSS:</p>
<pre><code class="language-sass">.image-one, .image-two {
    width: 100%;
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
}

.image-one {
    background-image:url(/img/image-one.jpg") ;
}

.image-two {
    background-image:url(/img/image-two.jpg") ;
}</code></pre>
<p>The repeated code in the placeholder is output only once with only the unique styles being applied to the individual selectors. If unused, the placeholder styles are not output at all.</p>
<p>Tying in with point 3, placeholders can be used alongside mixins to reduce duplicate code and still keep the flexibility of a mixin&hellip;</p>
<pre><code class="language-sass">/* placeholder
============================================= */

%btn {
    padding: 10px;
    color:#fff;
    curser: pointer;
    border: none;
    shadow: none;
    font-size: 14px;
    width: 150px;
    margin: 5px 0;
    text-align: center;
    display: block;
}

/* button mixin
============================================= */

@mixin  btn-background($btn-background) {
    @extend %btn;
    background-color: $btn-background;
    &amp;:hover {
        background-color: lighten($btn-background,10%);
    }
}

/* buttons
============================================= */

.cta-btn {
    @include btn-background(green);
}

.main-btn {
    @include btn-background(orange);
}

.info-btn {
    @include btn-background(blue);
}</code></pre>
<h2 id="5-use-functions-for-calculations">5. Use Functions for Calculations</h2>
<p>
  <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#functions">Functions</a>
  are used to perform calculations. A Sass function does not output any CSS. Instead, it returns a value that can be used in the CSS. This is useful for calculations that will be made throughout the site.</p>
<p>For example, functions are useful for calculating the percentage width of a given element:</p>
<pre><code class="language-sass">@function calculate-width ($col-span) {
    @return 100% / $col-span
}

.span-two {
    width: calculate-width(2); // spans 2 columns, width = 50%
}

.span-three {
    width: calculate-width(3); // spans 3 columns, width = 33.3%
}</code></pre>
<h2 id="6-order-your-work">6. Order Your Work</h2>
<p>Place all mixins, functions, placeholders and variables in their relevant partial file. Keeping blocks of code together will ensure they are easy to edit and reuse in the future.</p>
<p>Site-wide elements should be kept together in a base folder. The base folder should contain global variables such as fonts and colour schemes:</p>
<pre><code class="language-sass">$font-primary: 'roboto', sans-serif;
$font-secondary: arial, helvetica, sans-serif;

$color-primary: $orange;
$color-secondary: $blue;
$color-tertiary: $grey;</code></pre>
<p>Module-specific mixins, functions, and variables should be kept within the correct module&rsquo;s partial file:</p>
<pre><code class="language-sass">$tab-radius: 5px;
$tab-color: $grey;</code></pre>
<h2 id="7-limit-nesting">7. Limit Nesting</h2>
<p>Overusing nested rules in Sass can cause a lot of issues, from complex code to over-specificity and too much reliance on the HTML structure of a page. These things can cause issues further down the line and potentially increase the need for the
  inclusion of !important, which should generally be avoided.</p>
<p>Here are some golden rules for nesting:</p>

<ul class="unordered-list">
  <li class="unordered-list__list-item">Never go more then 3 levels deep.</li>
  <li class="unordered-list__list-item">Ensure the CSS output is clean and reusable.</li>
  <li class="unordered-list__list-item">Use nesting when it makes sense to, not as a default option.</li>
</ul>

<h2 id="8-keep-things-simple">8. Keep Things Simple</h2>
<p>The concluding point I&rsquo;ll make in this post is to keep things as simple as possible. The purpose of Sass is to write cleaner more manageable CSS. Before creating any new mixins, variables, or functions, ensure that their presence will
  enhance development and not overcomplicate things. All Sass features are useful when used in the correct situations and in moderation.</p>
<p>Creating an endless list of variables without clear usage, or a complex function that is difficult to understand for anyone other than the author is not the intention and will not aid development or produce DRY CSS.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it for this list of Sass tips. You might not agree with all of these. Sass is still a fairly new technology so we&rsquo;re continuing to learn new best practices with it. If you have your own suggestions, feel free to offer a comment.</p>
