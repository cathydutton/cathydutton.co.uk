--- 
title: Stepping away from Sass 
description: Why I left out Sass in the latest rebuild of my personal website, blog and portfolio
date: "2018-12-18" 
tags: [Front end deveopment, CSS] 
---

<p>
  I try to rebuild or redesign my website at least once every year, It's a great way to keep up to date with HTML and CSS advances as workflows and site generators. I launched the latest version this month moving from Jekyll and Github pages to Eleventy and Netlify.
</p>

<p>
  I also unintentionaly, (atleast at first) removed all traces of Sass from my codebase. This was not something I set out to do but the more I looked at my old Sass files the more I questioned wether it adding value to my site, or just an extra level of complexity and dependancy. CSS has evolved over recent years and the problems that lead me to Sass in the first place seem to be less of an issue today.
</p>

<h2>What problems was Sass solving?</h2>

<p>
  When I first heard about Sass I was sceptical, but as I built more and more responsive sites I began to relise how much time I could save by using reusable pieces of logic or maths from CSS functions and mixins. It also became aparent that as devices, viewports and themes changed using variables made implementing changes much easier to handle.
</p>

<h2>1) Layout</h2>

<p>
  Layout has been a longstanding source of frustration with CSS. Moving from table layouts to floated elements and even flexbox there has never really been an accepted standard convention. This coupled with a move to fluid or responsive layouts was a key factor in my initial decsision to use a CSS pre processor like Sass.
</p>

<h3>Before Sass</h3>

<p>
  I can still remember my first attempt building a responsive grid layout in CSS, it envolved creating a set of utility classes for each coloumn and then poluting the markup with non semantic class names like col-span-1 col-span-4. 
</p>

<pre>
  <code>
.col-span-1 {
  float: left;
  width: 40px;
  margin-left: 20px;
}

.col-span-4 {
  float: left;
  width: 220px;
  margin-left: 20px;
}
  </code>
</pre>

<p>
  By using a Sass mixin coupled with variables I was able to remove utility classes like the ones above, and also create more flexible layouts by changing the $gridColumns variable.
</p>

<h3>My first grid mixin</h3>

<pre>
  <code>
@mixin grid($colSpan, $gridColumns: 12, $margin: 1%,) {
  $unitWidth: $gridColumns / $colSpan;
  float:left;
  width: (100 - $unitWidth * $margin) / $unitWidth;
  margin: 0 $margin/2;
}

.sidebar {
	@include grid(3);
}

.main-content {
	@include grid(9);
}
  </code>
</pre>

<h3>CSS grid</h3>

<p>
  The introduction of CSS Grid removes the need for any of this, you no longer need to build a grid system in CSS, Sass or any other processor.
</p>

  <figure class="quote" cite="http://www.worldwildlife.org/who/index.html">
    <blockquote>
      You donâ€™t need a tool that helps you make it look like you have a grid, you actually have a grid!
    </blockquote>
    <figcaption> Rachel Andrew,
      <cite> 
      <a href="https://rachelandrew.co.uk/archives/2017/07/01/you-do-not-need-a-css-grid-based-grid-system/" class="anchor">You do not need a CSS Grid based Grid System</a>
      </cite>
    </figcaption>
  </figure>

<p>

</p>


<hr/>


<p>
Grid - future subgrid with no MQ's - more flexable plain CSS layout tools -  Intrinsic Web design - browser upport
</p>






<h2>2) Variables - not called this called quick changes or something like that</h2>



<h2>3) Typography</h2>

<p>
  Why did I use Sass fro typography?
</p>

<p>
  Variabke fonts and my current site thing
</p>


<h3>Sass variables</h3>


<pre>
  <code>
$colour-black: #100112;
$colour-dark: #1d0320;
$colour-medium: #760c82;
$colour-light: #f0efef;
$colour-white: #fcfcfc;
$colour-bright: #e61e9c;

.wrapper {
  background: $colour-white;
} 
  </code>
</pre>

<p>However this can be resolved using CSS colour functions, like hsl() - explaining more and other functions. These CSS functions require an extra variable not necessary with Sass but avoid having to find values for colours and allow for easy iterations and consistency between colour changes.</p>





<p>With the browser support already in place CSS grid can remove the need to rely on pre processors to perfect your layout CSS</p>



<p>https://cloudfour.com/thinks/building-themes-with-css4-color-features/</p>






<h2>PostCSS</h2>

<p>PostCSS can help with the transition without creating a reliance on bolt on languages.</p>

<h3>Become less reliant on Sass, write CSS and phase out PostCSS as and when CSS gets better</h3>

<p>
Autoprefixer for css grid fallbacks
</p>









<h2>Summary</h2>

<p>Its about removing relience and building future proof code (PostCSS and webpack/gulp)</p>

<h2>Still use Sass for...</h2>

<p>Built some cool things that I would not like to tackle in CSS alone
https://codepen.io/cathydutton/pen/FDipu
</p>

<p>This article is not about abandoning Sass because of the poorly output code or any of the other backlash articles. I still think Sass is an amazing tool, I also still think it is capable of producing CSS to solve real problems. My point is more that the original problems that Sass helped me to solve are no longer problems. CSS has moved on and can handle my needs by itself. I would still use Sass for any bespoke CSS needs or complex pieces, but in my day to day work it's inclusion is harder and harder to justify. </p>

